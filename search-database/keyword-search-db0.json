[{"url":"/articles/980ae7eb03564dcc807f35622213a827/","date":"2023-01-23","title":"WPFメモ","category":{"order":2,"name":"Scrap","url":"/categories/scrap/"},"tags":[{"name":"WPF","url":"/tags/wpf/"}],"content":"デモ aaaaaa"},{"url":"/articles/494cd9ee1be2439c805277f5db5c9227/","date":"2019-07-13","title":"[TS] OpenCV.jsで画像処理を試してみた","category":{"order":0,"name":"Demo","url":"/categories/demo/"},"tags":[{"name":"2D","url":"/tags/2d/"},{"name":"OpenCV","url":"/tags/opencv/"},{"name":"TypeScript","url":"/tags/typescript/"}],"content":"デモ \u003Cscript defer src=\u0022/files/cvdemo-ts/opencv-4.0.1.js\u0022\u003E\u003C/script\u003E \u003Cscript defer src=\u0022/files/cvdemo-ts/cvdemo.js?v=9b6b4392aa42418fbdeae5f6607ff23c\u0022\u003E\u003C/script\u003E \u003Cdiv id=\u0022demo-loading-progress\u0022\u003ELoading...\u003C/div\u003E \u003Cdiv id=\u0022demo-root\u0022 style=\u0022display: none;\u0022\u003E \u003Cdiv\u003E \u003C!-- 処理前の画像 --\u003E \u003Cspan id=\u0022img-src-wrapper\u0022 style=\u0022margin: 1px;\u0022\u003E \u003C/span\u003E \u003C!-- 処理後の表示 --\u003E \u003Cspan style=\u0022margin: 1px;\u0022\u003E \u003Ccanvas id=\u0022canvas-dst\u0022 width=\u00221\u0022 height=\u00221\u0022\u003E\u003C/canvas\u003E \u003C/span\u003E \u003C/div\u003E \u003Cdiv style=\u0022font-size: 75%;\u0022\u003E \u003Cdiv style=\u0022display: inline-grid; grid-template-columns: auto 5px auto;\u0022\u003E \u003C!-- ガンマ --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-gamma\u0022 type=\u0022checkbox\u0022 checked /\u003E \u003Clabel for=\u0022check-gamma\u0022\u003Eガンマ\u003C/label\u003E \u003C/div\u003E \u003Cdiv\u003E\u003C/div\u003E \u003Cdiv\u003E \u003Cinput id=\u0022range-gamma\u0022 type=\u0022range\u0022 style=\u0022width: 125px;\u0022 min=\u00220.5\u0022 max=\u00225.0\u0022 step=\u00220.1\u0022 value=\u00222.0\u0022 /\u003E \u003Cspan id=\u0022span-gamma\u0022\u003E\u003C/span\u003E \u003C/div\u003E \u003C!-- コントラスト --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-contrast\u0022 type=\u0022checkbox\u0022 checked /\u003E \u003Clabel for=\u0022check-contrast\u0022\u003Eコントラスト\u003C/label\u003E \u003C/div\u003E \u003Cdiv\u003E\u003C/div\u003E \u003Cdiv\u003E \u003Cinput id=\u0022range-contrast\u0022 type=\u0022range\u0022 style=\u0022width: 125px;\u0022 min=\u00221.0\u0022 max=\u002215.0\u0022 step=\u00220.1\u0022 value=\u00228.0\u0022 /\u003E \u003Cspan id=\u0022span-contrast\u0022\u003E\u003C/span\u003E \u003C/div\u003E \u003C!-- シャープネス --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-sharpness\u0022 type=\u0022checkbox\u0022 checked /\u003E \u003Clabel for=\u0022check-sharpness\u0022\u003Eシャープネス\u003C/label\u003E \u003C/div\u003E \u003Cdiv\u003E\u003C/div\u003E \u003Cdiv\u003E \u003Cinput id=\u0022range-sharpness\u0022 type=\u0022range\u0022 style=\u0022width: 125px;\u0022 min=\u00220.1\u0022 max=\u002210.0\u0022 step=\u00220.1\u0022 value=\u00223.0\u0022 /\u003E \u003Cspan id=\u0022span-sharpness\u0022\u003E\u003C/span\u003E \u003C/div\u003E \u003C!-- モザイク --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-mosaic\u0022 type=\u0022checkbox\u0022 /\u003E \u003Clabel for=\u0022check-mosaic\u0022\u003Eモザイク\u003C/label\u003E \u003C/div\u003E \u003Cdiv\u003E\u003C/div\u003E \u003Cdiv\u003E \u003Cinput id=\u0022range-mosaic\u0022 type=\u0022range\u0022 style=\u0022width: 125px;\u0022 min=\u00222\u0022 max=\u002230\u0022 step=\u00221\u0022 value=\u00225.0\u0022 /\u003E \u003Cspan id=\u0022span-mosaic\u0022\u003E\u003C/span\u003E \u003C/div\u003E \u003C/div\u003E \u003C!-- ディザリング --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-dithering\u0022 type=\u0022checkbox\u0022 /\u003E \u003Clabel for=\u0022check-dithering\u0022\u003Eディザリング（8色に減色）\u003C/label\u003E \u003C/div\u003E \u003C!-- グレイスケール --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-grayscale\u0022 type=\u0022checkbox\u0022 /\u003E \u003Clabel for=\u0022check-grayscale\u0022\u003Eグレイスケール\u003C/label\u003E \u003C/div\u003E \u003Cdiv id=\u0022require-grayscaled\u0022 style=\u0022margin-left: 1.5em;\u0022\u003E \u003C!-- 大津の二値化 --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-binary\u0022 type=\u0022checkbox\u0022 /\u003E \u003Clabel for=\u0022check-binary\u0022\u003E大津の二値化\u003C/label\u003E \u003C/div\u003E \u003C!-- 重心表示 --\u003E \u003Cdiv\u003E \u003Cinput id=\u0022check-center\u0022 type=\u0022checkbox\u0022 /\u003E \u003Clabel for=\u0022check-center\u0022\u003E重心表示\u003C/label\u003E \u003C/div\u003E \u003C/div\u003E \u003C/div\u003E \u003C/div\u003E はじめに もともと OpenCvSharp で遊んでいたんですが、OpenCV.js なるものが存在することを知ったので試してみました。 OpenCV.jsですが、npm管理されているわけではなく、またts定義ファイルがないのがかなりつらいです。 OpenCV.js https://opencv.org/ https://docs.opencv.org/4.0.1/d5/d10/tutorial_js_root.html OpenCvSharp https://www.nuget.org/profiles/schimatk ソースコード HTML script defer src=/files/cvdemo-ts/opencv-4.0.1.js/script script defer src=/files/cvdemo-ts/cvdemo.js?v=9b6b4392aa42418fbdeae5f6607ff23c/script div id=demo-loading-progressLoading.../div div id=demo-root style=display: none; div !-- 処理前の画像 -- span id=img-src-wrapper style=margin: 1px; /span !-- 処理後の表示 -- span style=margin: 1px; canvas id=canvas-dst width=1 height=1/canvas /span /div div style=font-size: 75%; div style=display: inline-grid; grid-template-columns: auto 5px auto; !-- ガンマ -- div input id=check-gamma type=checkbox checked / label for=check-gammaガンマ/label /div div/div div input id=range-gamma type=range style=width: 125px; min=0.5 max=5.0 step=0.1 value=2.0 / span id=span-gamma/span /div !-- コントラスト -- div input id=check-contrast type=checkbox checked / label for=check-contrastコントラスト/label /div div/div div input id=range-contrast type=range style=width: 125px; min=1.0 max=15.0 step=0.1 value=8.0 / span id=span-contrast/span /div !-- シャープネス -- div input id=check-sharpness type=checkbox checked / label for=check-sharpnessシャープネス/label /div div/div div input id=range-sharpness type=range style=width: 125px; min=0.1 max=10.0 step=0.1 value=3.0 / span id=span-sharpness/span /div !-- モザイク -- div input id=check-mosaic type=checkbox / label for=check-mosaicモザイク/label /div div/div div input id=range-mosaic type=range style=width: 125px; min=2 max=30 step=1 value=5.0 / span id=span-mosaic/span /div /div !-- ディザリング -- div input id=check-dithering type=checkbox / label for=check-ditheringディザリング（8色に減色）/label /div !-- グレイスケール -- div input id=check-grayscale type=checkbox / label for=check-grayscaleグレイスケール/label /div div id=require-grayscaled style=margin-left: 1.5em; !-- 大津の二値化 -- div input id=check-binary type=checkbox / label for=check-binary大津の二値化/label /div !-- 重心表示 -- div input id=check-center type=checkbox / label for=check-center重心表示/label /div /div /div /div TypeScript declare var cv: any; class CvDemoApp { private _imgSrc: HTMLImageElement | null = null; private readonly _canvasDst = document.querySelectorHTMLCanvasElement(#canvas-dst)!; private readonly _checkGamma = document.querySelectorHTMLInputElement(#check-gamma)!; private readonly _rangeGamma = document.querySelectorHTMLInputElement(#range-gamma)!; private readonly _spanGamma = document.querySelectorHTMLSpanElement(#span-gamma)!; private readonly _checkContrast = document.querySelectorHTMLInputElement(#check-contrast)!; private readonly _rangeContrast = document.querySelectorHTMLInputElement(#range-contrast)!; private readonly _spanContrast = document.querySelectorHTMLSpanElement(#span-contrast)!; private readonly _checkSharpness = document.querySelectorHTMLInputElement(#check-sharpness)!; private readonly _rangeSharpness = document.querySelectorHTMLInputElement(#range-sharpness)!; private readonly _spanSharpness = document.querySelectorHTMLSpanElement(#span-sharpness)!; private readonly _checkMosaic = document.querySelectorHTMLInputElement(#check-mosaic)!; private readonly _rangeMosaic = document.querySelectorHTMLInputElement(#range-mosaic)!; private readonly _spanMosaic = document.querySelectorHTMLSpanElement(#span-mosaic)!; private readonly _checkDithering = document.querySelectorHTMLInputElement(#check-dithering)!; private readonly _checkGrayscale = document.querySelectorHTMLInputElement(#check-grayscale)!; private readonly _checkBinary = document.querySelectorHTMLInputElement(#check-binary)!; private readonly _checkCenter = document.querySelectorHTMLInputElement(#check-center)!; public start(): void { document.querySelectorHTMLElement(#demo-loading-progress)!.style.display = none; document.querySelectorHTMLElement(#demo-root)!.style.display = inline; const targets = document.querySelectorAllHTMLInputElement(#demo-root input); for (const target of targets) { target.addEventListener(change, () = { if (this._imgSrc?.complete) { this.refreshGui(); this.processCv(); } }); } this._imgSrc = document.createElement(img); this._imgSrc.onload = () = { this.refreshGui(); this.processCv(); }; this._imgSrc.src = /files/cvdemo-ts/test.jpg?v=9b6b4392aa42418fbdeae5f6607ff23c; document.querySelector(#img-src-wrapper)!.appendChild(this._imgSrc); } private refreshGui(): void { this._rangeGamma.disabled = !this._checkGamma.checked; this._spanGamma.textContent = this._rangeGamma.value; this._rangeContrast.disabled = !this._checkContrast.checked; this._spanContrast.textContent = this._rangeContrast.value; this._rangeSharpness.disabled = !this._checkSharpness.checked; this._spanSharpness.textContent = this._rangeSharpness.value; this._rangeMosaic.disabled = !this._checkMosaic.checked; this._spanMosaic.textContent = this._rangeMosaic.value; const targets = document.querySelectorAllHTMLInputElement(#require-grayscaled input); for (const target of targets) { target.disabled = !this._checkGrayscale.checked; } } private processCv(): void { const imageProc = new ImageProc(cv.imread(this._imgSrc!)); try { if (this._checkGamma.checked) { imageProc.gamma(this._rangeGamma.valueAsNumber); } if (this._checkContrast.checked) { imageProc.contrast(this._rangeContrast.valueAsNumber); } if (this._checkSharpness.checked) { imageProc.sharpness(this._rangeSharpness.valueAsNumber); } if (this._checkMosaic.checked) { imageProc.mosaic(this._rangeMosaic.valueAsNumber); } if (this._checkDithering.checked) { imageProc.dithering(); } if (this._checkGrayscale.checked) { imageProc.colorToGray(); if (this._checkBinary.checked) { imageProc.binary(); } if (this._checkCenter.checked) { imageProc.drawCenterOfMoments(); } } cv.imshow(this._canvasDst, imageProc.mat); } finally { imageProc.dispose(); } } } /** * 画像処理クラス */ class ImageProc { private _disposed = false; public get mat(): any { return this._mat; } public constructor(private _mat: any) { } public dispose(): void { if (!this._disposed) { this._mat.delete(); this._disposed = true; } } // ガンマ補正 public gamma(value: number): void { const GV = 1.0 / value; const lut = ImageProc.createLut(i = { return Math.pow(i / 255.0, GV) * 255.0; }); this.applyFunc((row, col, value) = lut[value]); } // コントラスト調整 public contrast(value: number): void { const lut = ImageProc.createLut(i = { return 255.0 / (1 \u002B Math.exp(-value * (i - 128) / 255.0)); }); this.applyFunc((row, col, value) = lut[value]); } // シャープネス public sharpness(value: number): void { this.exchange(dst = { value = value / 9.0; const kernelData = [ -value, -value, -value, -value, 1 \u002B (8 * value), -value, -value, -value, -value, ]; const kernel = cv.matFromArray(3, 3, cv.CV_64F, kernelData); cv.filter2D(this._mat, dst, -1, kernel); }); } // モザイク public mosaic(value: number): void { const ROWS = this._mat.rows; const COLS = this._mat.cols; this.exchange(dst = { const dstSize = new cv.Size(0, 0); const ratio = 1.0 / value; cv.resize(this._mat, dst, dstSize, ratio, ratio, cv.INTER_NEAREST); }); this.exchange(dst = { const dstSize = new cv.Size(COLS, ROWS); cv.resize(this._mat, dst, dstSize, 0, 0, cv.INTER_NEAREST); }); } // カラー to グレー public colorToGray(): void { this.exchange(dst = { cv.cvtColor(this._mat, dst, cv.COLOR_RGBA2GRAY, 0); }); } // グレー to カラー public grayToColor(): void { this.exchange(dst = { cv.cvtColor(this._mat, dst, cv.COLOR_GRAY2RGBA, 0); }); } // 大津の二値化 public binary(): void { this.exchange(dst = { cv.threshold(this._mat, dst, 0.0, 255.0, cv.THRESH_BINARY | cv.THRESH_OTSU); }); } // ディザリング public dithering(): void { const matrix = [[0, 8, 2, 10], [12, 4, 14, 6], [3, 11, 1, 9], [15, 7, 13, 5]]; for (let i = 0; i 4; i\u002B\u002B) { for (let j = 0; j 4; j\u002B\u002B) { matrix[i][j] *= 16; } } this.applyFunc((row, col, value) = { return (value matrix[row % 4][col % 4]) ? 0 : 255; }); } // 重心描画 public drawCenterOfMoments(): void { const center = this.getCenterOfMoments(); this.grayToColor(); this.fillCircle(center, 7, new cv.Scalar(255, 0, 0, 255)); } // 塗りつぶし円を描画 public fillCircle(point: any, radius: number, scalar: any): void { cv.circle(this._mat, point, radius, scalar, -1, cv.LINE_AA); } // 重心取得 public getCenterOfMoments(): any { const moments = cv.moments(this._mat); return new cv.Point(moments.m10 / moments.m00, moments.m01 / moments.m00); } // 画像処理時の共通処理 private exchange(callback: (dst: any) = void): void { const dst = new cv.Mat(); callback(dst); this._mat.delete(); this._mat = dst; } // 各RGBに対する処理 public applyFunc(callback: (row: number, col: number, value: number) = number): void { if (!this._mat.isContinuous()) { throw mat is not continuous.; } const ROWS = this._mat.rows; const COLS = this._mat.cols; const CHANNELS = this._mat.channels(); const TARGET_CHANNELS = Math.min(CHANNELS, 3); let index = 0; let beforeIndex = 0; const data = this._mat.data; for (let row = 0; row ROWS; row\u002B\u002B) { beforeIndex = row * COLS * CHANNELS; for (let col = 0; col COLS; col\u002B\u002B) { index = beforeIndex \u002B (col * CHANNELS); for (let ch = 0; ch TARGET_CHANNELS; ch\u002B\u002B) { data[index \u002B ch] = callback(row, col, data[index \u002B ch]); } } } } // ルックアップテーブル生成 public static createLut(callback: (i: number) = number): number[] { const LENGTH = 256; const lut = new Arraynumber(LENGTH); for (let i = 0; i LENGTH; i\u002B\u002B) { lut[i] = Math.floor(callback(i)); } return lut; } } const demoApp = new CvDemoApp(); demoApp.start();"},{"url":"/articles/8df409a9cfdf41e8b67099026cddbc66/","date":"2018-12-02","title":"[C\u002B\u002B] DirectX9で太陽系を描画する","category":{"order":0,"name":"Demo","url":"/categories/demo/"},"tags":[{"name":"3D","url":"/tags/3d/"},{"name":"DirectX","url":"/tags/directx/"},{"name":"C\u002B\u002B","url":"/tags/cpp/"}],"content":"はじめに 3Dプログラミング学習用に昔作成したサンプルをアップしました。 https://github.com/yoshiheight/Sample.D3DGalaxy \u003Cdiv style=\u0022max-width: 640px;\u0022\u003E\u003Cvideo src=\u0022/files/d3d-galaxy/d3d-galaxy.mp4\u0022 controls\u003E\u003C/video\u003E\u003C/div\u003E 仕様 惑星の大きさ、惑星間の距離は実際の値を反映 軌道傾斜角、楕円軌道は無視 カメラは「原点を注視するモード」「惑星を一定距離で注視するモード」を切り替え可能 「惑星を一定距離で注視するモード」の場合、惑星間を移動可能 太陽 \u003E 惑星公転 \u003E 衛星公転は、行列の親子関係で処理する 周囲の星々は天球を使って処理する 操作方法 キー |操作 -----|-------------- テンキー 1 / 3 |カメラX軸移動（\u002B Ctrl で回転） テンキー 5 / 2 |カメラY軸移動（\u002B Ctrl で回転） テンキー 9 / 6 |カメラZ軸移動（\u002B Ctrl で回転） テンキー \u002B / - |カメラズーム Q / W |公転半径割合変更 ESC |終了 F1 |固定FPSモード / FPS計測モードの切り替え F2 |惑星間のカメラ移動 F3 |カメラ切り替え（原点注視 / 惑星を一定距離で注視） F4 |ライトON / OFF F5 |Solid / Wireframe切り替え F6 |惑星サイズ実物 / 全て同一切り替え F7 |公転リセット"},{"url":"/articles/718ac1cb539c47edb70462354c110387/","date":"2018-12-01","title":"[C\u002B\u002B] DirectX9で高さマップから地形を生成する","category":{"order":0,"name":"Demo","url":"/categories/demo/"},"tags":[{"name":"3D","url":"/tags/3d/"},{"name":"DirectX","url":"/tags/directx/"},{"name":"C\u002B\u002B","url":"/tags/cpp/"}],"content":"はじめに 3Dプログラミング学習用に昔作成したサンプルをアップしました。 https://github.com/yoshiheight/Sample.D3DField \u003Cdiv style=\u0022max-width: 640px;\u0022\u003E\u003Cvideo src=\u0022/files/d3d-field/d3d-field.mp4\u0022 controls\u003E\u003C/video\u003E\u003C/div\u003E 仕様 地形を表すメッシュ状のポリゴンを、外部からロードした高さマップによって生成する 高さマップは、グレースケールのBMP画像を使用する 1ピクセルがポリゴン1頂点を表す 各ピクセルが256段階の高さを表し、色が薄いほど高い標高とする 地形全体に地形画像用テクスチャをマッピング可能とする テクスチャのサイズは高さマップと同じでなくてもいい ポイントスプライトを使用して雪を降らせる 雪はαで抜きの入った画像を使用 操作方法 キー |操作 -----|-------------- ← / → |モデルX軸移動（\u002B Ctrl で回転） ↑ / ↓ |モデルY軸移動（\u002B Ctrl で回転） PgUp / PgDn |モデルZ軸移動（\u002B Ctrl で回転） テンキー 1 / 3 |カメラX軸移動（\u002B Ctrl で回転） テンキー 5 / 2 |カメラY軸移動（\u002B Ctrl で回転） テンキー 9 / 6 |カメラZ軸移動（\u002B Ctrl で回転） テンキー \u002B / - |カメラズーム 1 / Q |光源色R 2 / W |光源色G 3 / E |光源色B A / Z |光源方向X S / X |光源方向Y D / C |光源方向Z O / L |高さ単位 ESC |終了 F1 |固定FPSモード / FPS計測モードの切り替え F2 |頂点バッファ/ インデックスバッファの切り替え F3 |カメラ切り替え（原点注視 / 任意注視） F4 |ライトON / OFF F5 |Solid / Wireframe切り替え F6 |法線表示ON / OFF F7 |テクスチャON / OFF F8 |フォグON / OFF"},{"url":"","date":"","title":"","category":{"order":0,"name":"","url":""},"tags":[],"content":""}]
